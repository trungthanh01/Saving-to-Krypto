import React, { useState, useEffect, useContext } from 'react'; // Th√™m useContext
import { AppContext } from '../../context/AppContext'; // Th√™m AppContext
import { calculateDcaResult, calculateDaysBetween, transformCryptoCompareData } from '../../utils/dca-calculator'; // 1. Th√™m import
import { fetchCoinHistory } from '../../services/crypto-api';
import styles from './DcaCalculator.module.css';

export const DcaCalculator = () => {
  // 3. L·∫•y coinList t·ª´ context
  const { coinList, isCoinListLoading, coinListError } = useContext(AppContext);

  // 4. X√≥a useState v√† useEffect cho coinList
  const [inputs, setInputs] = useState({
    coinId: '', // coinId ƒë∆∞·ª£c ch·ªçn cu·ªëi c√πng
    investment: 50,
    frequency: 'monthly',
    startDate: '', // Thay th·∫ø periodDays b·∫±ng startDate
  });
  
  // State m·ªõi cho autocomplete
  const [searchTerm, setSearchTerm] = useState('');
  const [suggestions, setSuggestions] = useState([]);
  const [isSuggestionsVisible, setIsSuggestionsVisible] = useState(false);

  const [result, setResult] = useState(null);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState(''); // Kh·ªüi t·∫°o l√† chu·ªói r·ªóng

  // useEffect cho logic autocomplete kh√¥ng ƒë·ªïi
  useEffect(() => {
    if (searchTerm.trim() === '') {
      setSuggestions([]);
      return;
    }
    const filtered = coinList.filter(coin =>
      coin.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
      coin.symbol.toLowerCase().includes(searchTerm.toLowerCase())
    ).slice(0, 10); // Ch·ªâ hi·ªÉn th·ªã 10 k·∫øt qu·∫£
    setSuggestions(filtered);
    setIsSuggestionsVisible(true);
  }, [searchTerm, coinList]);

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    
    if (name === 'coinSearch') {
      setSearchTerm(value);
      // X√≥a coinId ƒë√£ ch·ªçn n·∫øu ng∆∞·ªùi d√πng b·∫Øt ƒë·∫ßu t√¨m ki·∫øm l·∫°i
      if (inputs.coinId) {
        setInputs(prev => ({ ...prev, coinId: '' }));
      }
    } else {
      setInputs(prevInputs => ({
        ...prevInputs,
        [name]: name === 'investment' ? Number(value) : value,
      }));
    }
  };

  const handleSuggestionClick = (coin) => {
    setInputs(prev => ({ ...prev, coinId: coin.id }));
    setSearchTerm(coin.name); // Hi·ªÉn th·ªã t√™n coin trong input
    setIsSuggestionsVisible(false); // ·∫®n danh s√°ch g·ª£i √Ω
  };
  
  const handleSubmit = async (e) => {
    e.preventDefault();
    
    if (!inputs.coinId || !inputs.startDate) {
      setError('Vui l√≤ng ch·ªçn coin v√† ng√†y b·∫Øt ƒë·∫ßu.');
      return;
    }

    setIsLoading(true);
    setError('');
    setResult(null);

    try {
      const diffDays = calculateDaysBetween(inputs.startDate);
      
      if (diffDays <= 0) {
        setError("Ng√†y b·∫Øt ƒë·∫ßu kh√¥ng h·ª£p l·ªá ho·∫∑c ·ªü trong t∆∞∆°ng lai.");
        setIsLoading(false);
        return;
      }

      // 2. G·ªçi API (coinId gi·ªù l√† symbol, vd: "BTC")
      const rawHistoricalData = await fetchCoinHistory(inputs.coinId, diffDays);

      // 3. "Bi√™n d·ªãch" d·ªØ li·ªáu tr∆∞·ªõc khi t√≠nh to√°n
      const historicalData = transformCryptoCompareData(rawHistoricalData);

      const dcaResult = calculateDcaResult({
        historicalData, // D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c chu·∫©n h√≥a
        investment: inputs.investment,
        frequency: inputs.frequency,
        periodDays: diffDays,
      });

      setResult(dcaResult);

    } catch (err) {
      console.error("L·ªói khi t√≠nh to√°n DCA:", err);
      setError('ƒê√£ c√≥ l·ªói x·∫£y ra. Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu gi√° ho·∫∑c t√≠nh to√°n.');
    } finally {
      setIsLoading(false);
    }
  };
  return (
    <div className={styles.calculatorSection}>
      <h2>C·ªó M√°y Th·ªùi Gian DCA üöÄ</h2>
      
      {/* 5. X·ª≠ l√Ω tr·∫°ng th√°i loading/error t·ª´ context */}
      {isCoinListLoading && <p>ƒêang t·∫£i danh s√°ch coin...</p>}
      {coinListError && <p className={styles.errorText}>{coinListError}</p>}

      {/* Form ch·ªâ hi·ªÉn th·ªã khi ƒë√£ c√≥ coinList */}
      {coinList.length > 0 && (
        <form className={styles.calculatorForm} onSubmit={handleSubmit} autoComplete="off">
          <div className={styles.formControls}>
            <div className={styles.formControl} onBlur={() => setTimeout(() => setIsSuggestionsVisible(false), 100)}>
              <label htmlFor="coinSearch">Ch·ªçn Coin</label>
              <input
                type="text"
                name="coinSearch"
                id="coinSearch"
                placeholder="T√¨m ki·∫øm (vd: Bitcoin, ETH...)"
                value={searchTerm}
                onChange={handleInputChange}
              />
              {isSuggestionsVisible && suggestions.length > 0 && (
                <ul className={styles.suggestionList}>
                  {suggestions.map(coin => (
                    <li key={coin.id} onMouseDown={() => handleSuggestionClick(coin)}>
                      <img src={coin.image} alt={coin.name} />
                      <span>{coin.name} ({coin.symbol.toUpperCase()})</span>
                    </li>
                  ))}
                </ul>
              )}
            </div>

            <div className={styles.formControl}>
              <label htmlFor="investment">S·ªë ti·ªÅn ƒë·∫ßu t∆∞ ($)</label>
              <input
                type="number"
                name="investment"
                value={inputs.investment}
                onChange={handleInputChange}
                min="1"
              />
            </div>

            <div className={styles.formControl}>
              <label htmlFor="frequency">T·∫ßn su·∫•t</label>
              <select name="frequency" value={inputs.frequency} onChange={handleInputChange}>
                <option value="monthly">H√†ng th√°ng</option>
                <option value="weekly">H√†ng tu·∫ßn</option>
              </select>
            </div>

            <div className={styles.formControl}>
              <label htmlFor="startDate">Ng√†y b·∫Øt ƒë·∫ßu</label>
              <input
                type="date"
                name="startDate"
                id="startDate"
                value={inputs.startDate}
                onChange={handleInputChange}
                max={new Date().toISOString().split("T")[0]} // Kh√¥ng cho ch·ªçn ng√†y t∆∞∆°ng lai
              />
            </div>
          </div>

          <button type="submit" className={styles.submitButton} disabled={isLoading || !inputs.coinId}>
            {isLoading ? 'ƒêang t√≠nh to√°n...' : 'Xem k·∫øt qu·∫£'}
          </button>
        </form>
      )}
      
      {/* ‚úÖ KHU V·ª∞C M·ªöI: HI·ªÇN TH·ªä K·∫æT QU·∫¢ */}
      <div className={styles.resultSection}>
        {isLoading && <p>ƒêang t·∫£i d·ªØ li·ªáu v√† t√≠nh to√°n...</p>}
        
        {error && <p className={styles.errorText}>{error}</p>}
        
        {result && (
          <div className={styles.resultCard}>
            <h3>K·∫øt qu·∫£ Gi·∫£ l·∫≠p</h3>
            <p>
              N·∫øu b·∫°n ƒë√£ ƒë·∫ßu t∆∞ 
              <strong> ${inputs.investment.toLocaleString()}</strong> m·ªói
              <strong> {inputs.frequency === 'monthly' ? 'th√°ng' : 'tu·∫ßn'}</strong> v√†o
              <strong> {searchTerm}</strong>
            </p>
            <p>k·ªÉ t·ª´ ng√†y <strong>{new Date(inputs.startDate).toLocaleDateString('vi-VN')}</strong>,
            </p>
            <div className={styles.resultSummary}>
              <p>...b√¢y gi·ªù b·∫°n s·∫Ω c√≥:</p>
              <h2>${result.currentValue.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</h2>
              <p className={result.profitLoss >= 0 ? styles.profit : styles.loss}>
                (T·ªïng v·ªën ƒë·∫ßu t∆∞: ${result.totalInvested.toLocaleString()})
                <br/>
                (L·ªùi/L·ªó: ${result.profitLoss.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })})
              </p>
            </div>
            <p className={styles.disclaimer}>
              *L∆∞u √Ω: K·∫øt qu·∫£ ch·ªâ mang t√≠nh ch·∫•t tham kh·∫£o d·ª±a tr√™n d·ªØ li·ªáu l·ªãch s·ª≠ v√† kh√¥ng ƒë·∫£m b·∫£o l·ª£i nhu·∫≠n trong t∆∞∆°ng lai.
            </p>
          </div>
        )}
      </div>
    </div>
  );
};
